#include "Rocket_test.h"
#include "US76.h"

/*
int main(int argc, char *argv[]) {

    double p = 101325;
    //double p = 1;
    double T = 242.1912;
    double Mach = 0.6519;
   int pressureIterations = 100;
    double pressureRange[100]  = {1.00000000e+00,   1.02447475e+03,   2.04794949e+03,
                                  3.07142424e+03,   4.09489899e+03,   5.11837374e+03,
                                  6.14184848e+03,   7.16532323e+03,   8.18879798e+03,
                                  9.21227273e+03,   1.02357475e+04,   1.12592222e+04,
                                  1.22826970e+04,   1.33061717e+04,   1.43296465e+04,
                                  1.53531212e+04,   1.63765960e+04,   1.74000707e+04,
                                  1.84235455e+04,   1.94470202e+04,   2.04704949e+04,
                                  2.14939697e+04,   2.25174444e+04,   2.35409192e+04,
                                  2.45643939e+04,   2.55878687e+04,   2.66113434e+04,
                                  2.76348182e+04,   2.86582929e+04,   2.96817677e+04,
                                  3.07052424e+04,   3.17287172e+04,   3.27521919e+04,
                                  3.37756667e+04,   3.47991414e+04,   3.58226162e+04,
                                  3.68460909e+04,   3.78695657e+04,   3.88930404e+04,
                                  3.99165152e+04,   4.09399899e+04,   4.19634646e+04,
                                  4.29869394e+04,   4.40104141e+04,   4.50338889e+04,
                                  4.60573636e+04,   4.70808384e+04,   4.81043131e+04,
                                  4.91277879e+04,   5.01512626e+04,   5.11747374e+04,
                                  5.21982121e+04,   5.32216869e+04,   5.42451616e+04,
                                  5.52686364e+04,   5.62921111e+04,   5.73155859e+04,
                                  5.83390606e+04,   5.93625354e+04,   6.03860101e+04,
                                  6.14094848e+04,   6.24329596e+04,   6.34564343e+04,
                                  6.44799091e+04,   6.55033838e+04,   6.65268586e+04,
                                  6.75503333e+04,   6.85738081e+04,   6.95972828e+04,
                                  7.06207576e+04,   7.16442323e+04,   7.26677071e+04,
                                  7.36911818e+04,   7.47146566e+04,   7.57381313e+04,
                                  7.67616061e+04,   7.77850808e+04,   7.88085556e+04,
                                  7.98320303e+04,   8.08555051e+04,   8.18789798e+04,
                                  8.29024545e+04,   8.39259293e+04,   8.49494040e+04,
                                  8.59728788e+04,   8.69963535e+04,   8.80198283e+04,
                                  8.90433030e+04,   9.00667778e+04,   9.10902525e+04,
                                  9.21137273e+04,   9.31372020e+04,   9.41606768e+04,
                                  9.51841515e+04,   9.62076263e+04,   9.72311010e+04,
                                  9.82545758e+04,   9.92780505e+04,   1.00301525e+05,
                                  1.01325000e+05};
    double Thrust;
    vector<double> Mfr;
    Collection::OutType out;
    vector<double> emissions;
    double total_flow;

    // Engine
    // SSME
    // raptor
    // raptor_vacuum

    caseTag engine = rl10b;

   for (int t = 0; t < pressureIterations ; t++){
       systemModule* sys = Rocket(pressureRange[t], T, Mach, engine, Thrust, Mfr, out, emissions, total_flow);
       //Rocket(pressureRange[t], T, Mach, engine, Thrust, Mfr, out, emissions);
    //Rocket(p, T, Mach, engine, Thrust, Mfr, out, emissions);

//        double total_mass_flow = 0;
//        vector<double> propellant_mfr;
//        std::for_each(Mfr.begin(), Mfr.end(), [&] (double n) {
//            total_mass_flow += n;
//            if (n != 0){
//                propellant_mfr.push_back(n);
//            }
//        });

        vector<double> emissions_mass = emissions*total_flow;

//    std::cout << std::endl << "Thrust = " << Thrust << ", Mfr = " << total_mass_flow << std::endl;
//    std::cout << "Isp = " << Thrust/(9.81*total_mass_flow) << std::endl;
    //std::cout << pressureRange[t] << ", " << Thrust << ", " << total_flow << ", " << Thrust/(9.81*total_mass_flow) << std::endl;
//        std::cout << p << ", " << Thrust << ", " << total_mass_flow << ", " << Thrust/(9.81*total_mass_flow) << std::endl;
//       std::vector<double>::iterator it;
//       for(it = emissions_mass.begin(); it != emissions_mass.end(); ++it) {
//           std::cout << (*it) << ', ';
//       }


       for (vector<double>::iterator iter = emissions_mass.begin();
            iter != emissions_mass.end(); ++iter) {
           cout << *iter << ", ";
       }
       std::cout << '\n';
   delete(sys);
   }

}*/

//void perform_postprocessing(double arr1[], double arr2[], double arr3[], int size, caseTag engine){
//    double Thrust;
//    vector<double> Mfr;
//    Collection::OutType out;
//    vector<double> emissions;
//    double total_flow;
//
//    // Engine
//    // SSME
//    // raptor
//    // raptor_vacuum
//
//
//
//    for (int t = 0; t < size; t++) {
//        US76 atmo(arr1[t]);
//
//        Node &freeStream = *new Node("/usr/share/cantera/data/gri30_highT.yaml", "gri30");
//        freeStream.Name_ = "Freestream";
//        Cantera::compositionMap initialComposition;
//        initialComposition.emplace("O2", 0.209);
//        initialComposition.emplace("N2", 1 - 0.209);
//        std::cout << atmo.p() << " " << atmo.T() << std::endl;
//        freeStream.setTPX(atmo.T(), 1, initialComposition);
//        //freeStream.setU(arr2[t]);
//        freeStream.setU(10);
//
//        systemModule *sys = Rocket(1, atmo.T(), freeStream.M(), engine, Thrust, Mfr, out, emissions, total_flow);
//        //Rocket(pressureRange[t], T, Mach, engine, Thrust, Mfr, out, emissions);
//        //Rocket(p, T, Mach, engine, Thrust, Mfr, out, emissions);
//
////        double total_mass_flow = 0;
////        vector<double> propellant_mfr;
////        std::for_each(Mfr.begin(), Mfr.end(), [&](double n) {
////            total_mass_flow += n;
////            if (n != 0) {
////                propellant_mfr.push_back(n);
////            }
////        });
//
//        vector<double> emissions_mass = emissions*total_flow*arr3[t];
//
////    std::cout << std::endl << "Thrust = " << Thrust << ", Mfr = " << total_mass_flow << std::endl;
////    std::cout << "Isp = " << Thrust/(9.81*total_mass_flow) << std::endl;
////        std::cout << pressureRange[t] << ", " << Thrust << ", " << total_mass_flow << ", "
////                  << Thrust / (9.81 * total_mass_flow) << std::endl;
////        std::cout << p << ", " << Thrust << ", " << total_mass_flow << ", " << Thrust/(9.81*total_mass_flow) << std::endl;
//
//        for (vector<double>::iterator iter = emissions_mass.begin();
//             iter != emissions_mass.end(); ++iter) {
//            cout << *iter << ", ";
//        }
//        std::cout << '\n';
//
//
//        delete (&freeStream);
//        delete (sys);
//    }
//}



int main(int argc, char *argv[]) {

    double verbosity;
    double mode;

//  ##### Step 1 - Select Engine, Mach Range and Altitude Range
    caseTag engine =  merlin1DVac;
    std::vector<double> machRange = {0};
    std::vector<double> altitudeRange = {100000};
    std::vector<double> throttleRange = {1};

//  ##### Step 3 - Select verbosity options #####
    /* HyPro verbosity options
     * 0 - Prints only the basic output from the model
     * 1 -
    */
    verbosity = 1;
    bool printout = true;
    bool printThesis = true;
//  Output labels
    bool labels = true;

//  Print Emissions
    bool printEmissions = false;

//  Print Mass Flow Rates
    bool printMassFlowRates = false;

    for (auto &Throttle : throttleRange ) {
        for (auto &Altitude : altitudeRange ) {
            US76 atmo(Altitude);
            for (auto &Mach : machRange) {
                fmt::print("Input Values: {}, {}, {}, {}, {}, {}\n", atmo.p(), atmo.T(), Mach, Throttle, engine, verbosity);
                auto[ok, data] = Rocket(atmo.p(), atmo.T(), Mach, Throttle, engine, verbosity);

                if (printThesis == true) {
                    fmt::print("Chamber:\np: {}\nT: {}\nrho: {}\na: {}\nM: {}\n", data.sys->nodes_[1].get()->getPress(),
                               data.sys->nodes_[1].get()->getTemp(),
                               data.sys->nodes_[1].get()->rho(),
                               data.sys->nodes_[1].get()->geta(),
                               data.sys->nodes_[1].get()->M());
                    fmt::print("Exit:\np: {}\nT: {}\nrho: {}\na: {}\nM: {}\nISP: {}\n", data.sys->N2().getPress(),
                               data.sys->N2().getTemp(),
                               data.sys->N2().rho(),
                               data.sys->N2().geta(),
                               data.sys->N2().M(),
                               data.thrust / (9.81 * data.total_flow));
                    // Hydrogen
//                    fmt::print("H2: {}\nH2O: {}\nHO2: {}\nH2O2: {}\nH: {}\nO {}\nOH {}\nO2 {}\nO3 {}\n", data.sys->N2().Y("H2"),
//                               data.sys->N2().Y("H2O"),
//                               data.sys->N2().Y("HO2"),
//                               data.sys->N2().Y("H2O2"),
//                               data.sys->N2().Y("H"),
//                               data.sys->N2().Y("O"),
//                               data.sys->N2().Y("OH"),
//                               data.sys->N2().Y("O2"),
//                               data.sys->N2().Y("O3"));
                    // Kerosene
                    fmt::print("CO: {}\nCO2: {}\nCOOH: {}\nH: {}\nHCO: {}\nHO2 {}\nH2 {}\nHCOOH {}\nH2O {}\nH2O2 {}\nO {}\nOH {}\nO2 {}\n", data.sys->N2().Y("CO"),
                               data.sys->N2().Y("CO2"),
                               data.sys->N2().Y("COOH"),
                               data.sys->N2().Y("H"),
                               data.sys->N2().Y("HCO"),
                               data.sys->N2().Y("HO2"),
                               data.sys->N2().Y("H2"),
                               data.sys->N2().Y("HCOOH"),
                               data.sys->N2().Y("H2O"),
                               data.sys->N2().Y("H2O2"),
                               data.sys->N2().Y("O"),
                               data.sys->N2().Y("OH"),
                               data.sys->N2().Y("O2"));
                }

                systemModule::deleteAll(data.sys);

                if (labels == true) {
                    std::cout << "Altitude = " << Altitude << ", Mach = " << Mach << ", Pressure = " << atmo.p()
                              << ", Temperature = " << atmo.T() << ", " << "Thrust = " << data.thrust << ", ISP = " << data.thrust / (9.81 * data.total_flow)
                              << ", Mfr = " << data.total_flow << std::endl;
                } else {
                    if (printout){
                        std::cout << Altitude << ", " << Mach << ", " << atmo.p() << ", " << atmo.T() << ", " << data.thrust << ", " << data.thrust / (9.81 * (data.Mfr[0] + data.Mfr[3])) <<  ", " << data.Mfr[0] + data.Mfr[3] << std::endl;

                    }
                }

                if (printEmissions == true) {
                    vector<double> emissions_mass = data.emissions*data.total_flow;
                    for (auto &emission : emissions_mass){
                        fmt::print("{}, ", emission);
                    }
                    fmt::print("\n");
                }

                if (printMassFlowRates == true) {
                    for (auto &massFlow : data.Mfr){
                        fmt::print("{}, ", massFlow);
                    }
                    fmt::print("\n");
                }






        }
        }
    }
//    double p = 101325;
//    //double p = 1;
//    double T = 242.1912;
//    double Mach = 0.6519;
//    std::cout << "Phase 1" << std::endl;
//    int Iterations = 37;
//    double altitudes[Iterations] = {100,201.9,305.21,409.99,516.28,624.13,733.58,844.69,957.49,1072,1188.4,1306.6,1426.6,1548.6,1672.5,1798.5,1926.5,2056.7,2188.9,2323.3,2460,2598.9,2740.1,2883.7,3029.5,3177.8,3328.5,3481.7,3637.3,3795.4,3956.1,4119.2,4284.9,4453.1,4623.9,4797.3,4973.2};
//    double throttles[Iterations] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//    double velocities[Iterations] = {100,101.38,102.81,104.28,105.81,107.38,109,110.67,112.39,114.15,115.97,117.83,119.75,121.71,123.73,125.79,127.91,130.07,132.3,134.57,136.9,139.28,141.72,144.22,146.78,149.4,152.08,154.83,157.64,160.52,163.47,166.5,169.6,172.78,176.04,179.38,182.82};
//    caseTag engine1 = rs68a;
//    perform_postprocessing(altitudes, velocities, throttles, Iterations, engine1);
//
//    std::cout << "Phase 2" << std::endl;
//    int Iterations2 = 97;
//    double altitudes2[Iterations2] = {5000,5175.2,5352.8,5532.8,5715.2,5899.9,6086.9,6276.2,6467.7,6661.4,6857.2,7055.1,7255,7456.8,7660.5,7866,8073.3,8282.2,8492.9,8705.1,8918.8,9134,9350.6,9568.6,9788,10009,10231,10454,10679,10905,11132,11361,11592,11824,12058,12294,12532,12772,13015,13260,13508,13758,14011,14268,14527,14790,15057,15326,15600,15877,16158,16442,16730,17022,17318,17618,17922,18230,18541,18857,19177,19501,19829,20162,20498,20839,21184,21533,21886,22244,22606,22972,23342,23717,24096,24479,24866,25257,25652,26052,26455,26862,27273,27688,28106,28528,28953,29382,29813,30248,30686,31126,31570,32015,32463,32913,33365};
//    double velocities2[Iterations2] = {182.11,185.63,189.22,192.89,196.63,200.45,204.35,208.33,212.4,216.56,220.8,225.14,229.58,234.11,238.75,243.49,248.35,253.31,258.39,263.59,268.91,274.36,279.93,285.63,291.46,297.43,303.53,309.77,316.14,322.65,329.3,336.08,343.01,350.08,357.28,364.61,372.06,379.62,387.31,395.1,402.99,411,419.1,427.31,435.62,444.04,452.57,461.21,469.97,478.85,487.87,497.01,506.3,515.72,525.28,535,544.86,554.88,565.05,575.39,585.89,596.57,607.41,618.43,629.64,641.03,652.61,664.38,676.35,688.51,700.88,713.45,726.23,739.21,752.41,765.82,779.45,793.31,807.38,821.69,836.22,850.98,865.98,881.21,896.68,912.39,928.34,944.52,960.95,977.61,994.52,1011.7,1029.1,1046.7,1064.6,1082.7,1101.1};
//    double throttles2[Iterations2] = {0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,0.96822,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//    caseTag engine2 = rs68a;
//    perform_postprocessing(altitudes2, velocities2, throttles2, Iterations2, engine2);

//    std::cout << "Phase 3" << std::endl;
//    int Iterations3 = 120;
//    double altitudes3[Iterations3] = {33687,34142,34599,35057,35516,35977,36438,36901,37364,37828,38293,38758,39225,39691,40158,40626,41093,41561,42029,42497,42965,43433,43901,44368,44835,45301,45767,46233,46698,47162,47626,48089,48551,49013,49473,49933,50393,50851,51309,51766,52223,52678,53134,53588,54042,54496,54949,55402,55855,56307,56760,57212,57664,58117,58569,59022,59476,59930,60384,60839,61295,61751,62209,62667,63127,63588,64050,64513,64978,65444,65911,66381,66852,67325,67800,68277,68756,69238,69722,70208,70697,71189,71684,72182,72683,73188,73696,74208,74724,75245,75770,76300,76835,77375,77921,78473,79031,79596,80167,80746,81332,81927,82529,83140,83760,84389,85028,85677,86336,87006,87688,88381,89086,89803,90534,91277,92035,92806,93593,94394};
//    double velocities3[Iterations3] = {1166.2,1185.2,1204.3,1223.7,1243.4,1263.3,1283.4,1303.7,1324.3,1345.2,1366.3,1387.6,1409.1,1430.9,1452.9,1475.2,1497.7,1520.5,1543.5,1566.7,1590.2,1614,1638,1662.2,1686.7,1711.4,1736.4,1761.6,1787.1,1812.8,1838.8,1865.1,1891.6,1918.3,1945.4,1972.6,2000.2,2028,2056.1,2084.4,2113.1,2142,2171.1,2200.6,2230.3,2260.3,2290.6,2321.2,2352.1,2383.2,2414.7,2446.5,2478.5,2510.9,2543.6,2576.7,2610,2643.7,2677.7,2712,2746.7,2781.7,2817.1,2852.9,2889,2925.5,2962.3,2999.6,3037.2,3075.3,3113.7,3152.6,3191.8,3231.5,3271.7,3312.2,3353.3,3394.8,3436.7,3479.2,3522.1,3565.5,3609.4,3653.9,3698.8,3744.3,3790.4,3837,3884.2,3931.9,3980.3,4029.2,4078.7,4128.7,4179.1,4230.1,4281.5,4333.3,4385.5,4438.1,4491,4544.2,4597.8,4651.7,4705.8,4760.2,4814.8,4869.7,4924.8,4980.2,5035.7,5091.5,5147.6,5203.8,5260.3,5317,5374,5431.3,5488.9,5546.9};
//    double throttles3[Iterations3] = {0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,0.99995,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502,0.81502};
//    caseTag engine3 = rs68a;
//    perform_postprocessing(altitudes3, velocities3, throttles3, Iterations3, engine3);

//    std::cout << "Phase 4" << std::endl;
//    int Iterations4 = 100;
//    double altitudes4[Iterations4] = {96410,98091,99757,1.0141e+05,1.0304e+05,1.0466e+05,1.0627e+05,1.0785e+05,1.0943e+05,1.1099e+05,1.1253e+05,1.1406e+05,1.1557e+05,1.1706e+05,1.1855e+05,1.2001e+05,1.2147e+05,1.229e+05,1.2432e+05,1.2573e+05,1.2712e+05,1.285e+05,1.2986e+05,1.312e+05,1.3254e+05,1.3385e+05,1.3515e+05,1.3644e+05,1.3771e+05,1.3897e+05,1.4021e+05,1.4144e+05,1.4266e+05,1.4386e+05,1.4504e+05,1.4621e+05,1.4737e+05,1.4852e+05,1.4964e+05,1.5076e+05,1.5186e+05,1.5295e+05,1.5402e+05,1.5509e+05,1.5613e+05,1.5717e+05,1.5819e+05,1.592e+05,1.6019e+05,1.6118e+05,1.6215e+05,1.6311e+05,1.6405e+05,1.6499e+05,1.6591e+05,1.6682e+05,1.6772e+05,1.6861e+05,1.6948e+05,1.7035e+05,1.712e+05,1.7204e+05,1.7288e+05,1.737e+05,1.745e+05,1.753e+05,1.7609e+05,1.7687e+05,1.7763e+05,1.7838e+05,1.7913e+05,1.7986e+05,1.8058e+05,1.8129e+05,1.8199e+05,1.8268e+05,1.8336e+05,1.8403e+05,1.8469e+05,1.8534e+05,1.8598e+05,1.866e+05,1.8722e+05,1.8783e+05,1.8842e+05,1.8901e+05,1.8958e+05,1.9015e+05,1.907e+05,1.9125e+05,1.9178e+05,1.923e+05,1.9281e+05,1.9331e+05,1.938e+05,1.9427e+05,1.9474e+05,1.9519e+05,1.9563e+05,1.9605e+05};
//    double velocities4[Iterations4] = {5561.2,5564.5,5567.9,5571.3,5574.8,5578.3,5581.8,5585.4,5589,5592.7,5596.4,5600.2,5604,5607.8,5611.7,5615.6,5619.5,5623.5,5627.6,5631.6,5635.7,5639.9,5644,5648.3,5652.5,5656.8,5661.1,5665.5,5669.9,5674.3,5678.8,5683.3,5687.8,5692.3,5696.9,5701.6,5706.2,5710.9,5715.6,5720.4,5725.1,5729.9,5734.8,5739.6,5744.5,5749.4,5754.3,5759.2,5764.2,5769.1,5774.1,5779.1,5784.1,5789.1,5794.2,5799.2,5804.3,5809.4,5814.5,5819.6,5824.8,5830,5835.2,5840.5,5845.8,5851.1,5856.4,5861.8,5867.2,5872.7,5878.1,5883.6,5889.1,5894.7,5900.3,5905.9,5911.5,5917.2,5922.9,5928.6,5934.4,5940.2,5946,5951.8,5957.8,5963.7,5969.7,5975.8,5981.9,5988,5994.3,6000.5,6006.9,6013.2,6019.7,6026.2,6032.7,6039.3,6045.9,6052.6};
//    double throttles4[Iterations4] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//    caseTag engine4 = rl10b;
//    perform_postprocessing(altitudes4, velocities4, throttles4, Iterations4, engine4);
//
//    std::cout << "Phase 5" << std::endl;
//    int Iterations5 = 100;
//    double altitudes5[Iterations5] = {1.9642e+05,1.9684e+05,1.9725e+05,1.9765e+05,1.9804e+05,1.9842e+05,1.9878e+05,1.9914e+05,1.9948e+05,1.9982e+05,2.0014e+05,2.0045e+05,2.0076e+05,2.0105e+05,2.0134e+05,2.0161e+05,2.0188e+05,2.0214e+05,2.0239e+05,2.0263e+05,2.0286e+05,2.0309e+05,2.033e+05,2.0351e+05,2.0371e+05,2.039e+05,2.0409e+05,2.0426e+05,2.0443e+05,2.0459e+05,2.0474e+05,2.0489e+05,2.0502e+05,2.0515e+05,2.0527e+05,2.0539e+05,2.0549e+05,2.0559e+05,2.0568e+05,2.0577e+05,2.0584e+05,2.0591e+05,2.0598e+05,2.0603e+05,2.0608e+05,2.0612e+05,2.0616e+05,2.0619e+05,2.0621e+05,2.0622e+05,2.0623e+05,2.0623e+05,2.0623e+05,2.0621e+05,2.062e+05,2.0617e+05,2.0614e+05,2.061e+05,2.0606e+05,2.0601e+05,2.0596e+05,2.059e+05,2.0583e+05,2.0576e+05,2.0568e+05,2.056e+05,2.0551e+05,2.0541e+05,2.0531e+05,2.052e+05,2.0509e+05,2.0498e+05,2.0486e+05,2.0473e+05,2.046e+05,2.0446e+05,2.0432e+05,2.0417e+05,2.0402e+05,2.0386e+05,2.037e+05,2.0354e+05,2.0337e+05,2.0319e+05,2.0302e+05,2.0283e+05,2.0265e+05,2.0246e+05,2.0226e+05,2.0206e+05,2.0186e+05,2.0165e+05,2.0144e+05,2.0123e+05,2.0101e+05,2.0079e+05,2.0056e+05,2.0034e+05,2.0011e+05,1.9987e+05};
//    double velocities5[Iterations5] = {6054.1,6060.8,6067.5,6074.2,6080.9,6087.7,6094.5,6101.2,6108,6114.8,6121.6,6128.4,6135.1,6141.9,6148.7,6155.5,6162.3,6169.1,6175.9,6182.8,6189.7,6196.5,6203.5,6210.4,6217.4,6224.3,6231.4,6238.4,6245.5,6252.5,6259.6,6266.8,6273.9,6281.1,6288.3,6295.6,6302.8,6310.1,6317.4,6324.8,6332.1,6339.5,6346.9,6354.3,6361.8,6369.3,6376.8,6384.3,6391.8,6399.4,6407,6414.6,6422.2,6429.9,6437.6,6445.3,6453,6460.8,6468.6,6476.4,6484.2,6492,6499.9,6507.8,6515.7,6523.6,6531.6,6539.6,6547.6,6555.6,6563.7,6571.7,6579.8,6587.9,6596.1,6604.2,6612.4,6620.6,6628.8,6637.1,6645.4,6653.6,6662,6670.3,6678.6,6687,6695.4,6703.8,6712.3,6720.7,6729.2,6737.7,6746.2,6754.8,6763.3,6771.9,6780.5,6789.2,6797.8,6806.5};
//    double throttles5[Iterations5] = {0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//    caseTag engine5 = rl10b;
//    perform_postprocessing(altitudes5, velocities5, throttles5, Iterations5, engine5);
//
    std::cout << "Phase 6" << std::endl;
//    int Iterations6 = 100;
//    double altitudes6[Iterations6] = {2e+05,2.0007e+05,2.0014e+05,2.0021e+05,2.0027e+05,2.0033e+05,2.0039e+05,2.0045e+05,2.005e+05,2.0055e+05,2.006e+05,2.0065e+05,2.007e+05,2.0074e+05,2.0079e+05,2.0083e+05,2.0087e+05,2.0091e+05,2.0094e+05,2.0098e+05,2.0101e+05,2.0105e+05,2.0108e+05,2.0111e+05,2.0114e+05,2.0118e+05,2.012e+05,2.0123e+05,2.0126e+05,2.0129e+05,2.0132e+05,2.0135e+05,2.0137e+05,2.014e+05,2.0143e+05,2.0145e+05,2.0148e+05,2.0151e+05,2.0153e+05,2.0156e+05,2.0159e+05,2.0161e+05,2.0164e+05,2.0167e+05,2.0169e+05,2.0172e+05,2.0175e+05,2.0177e+05,2.018e+05,2.0183e+05,2.0185e+05,2.0188e+05,2.019e+05,2.0193e+05,2.0195e+05,2.0197e+05,2.02e+05,2.0202e+05,2.0204e+05,2.0205e+05,2.0207e+05,2.0209e+05,2.021e+05,2.0211e+05,2.0212e+05,2.0213e+05,2.0213e+05,2.0213e+05,2.0213e+05,2.0213e+05,2.0212e+05,2.0211e+05,2.0209e+05,2.0207e+05,2.0204e+05,2.02e+05,2.0196e+05,2.0191e+05,2.0186e+05,2.018e+05,2.0173e+05,2.0166e+05,2.0158e+05,2.0149e+05,2.014e+05,2.013e+05,2.0119e+05,2.0108e+05,2.0097e+05,2.0084e+05,2.0071e+05,2.0058e+05,2.0044e+05,2.0029e+05,2.0014e+05,1.9999e+05,1.9983e+05,1.9966e+05,1.9949e+05,1.9932e+05};
//    double velocities6[Iterations6] = {6807.4,6815.7,6824,6832.3,6840.6,6849,6857.4,6865.7,6874.2,6882.6,6891,6899.5,6908,6916.5,6925,6933.6,6942.2,6950.7,6959.4,6968,6976.6,6985.3,6994,7002.7,7011.4,7020.2,7028.9,7037.7,7046.6,7055.4,7064.3,7073.2,7082.1,7091.1,7100,7109,7118.1,7127.1,7136.2,7145.3,7154.5,7163.6,7172.8,7181.9,7190.9,7199.8,7208.5,7217.2,7225.6,7233.9,7242.1,7250,7257.8,7265.5,7273,7280.3,7287.6,7294.7,7301.8,7308.9,7316,7323.2,7330.5,7337.8,7345.4,7353.1,7361.1,7369.2,7377.6,7386.3,7395.1,7404.2,7413.5,7423,7432.7,7442.5,7452.5,7462.7,7472.9,7483.2,7493.5,7503.9,7514.3,7524.7,7535.2,7545.6,7556,7566.5,7576.9,7587.3,7597.8,7608.2,7618.6,7629,7639.4,7649.8,7660.2,7670.6,7681,7691.3};
//    double throttles6[Iterations6] = {0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,0.9999,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,0.72427,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274,0.94274};
    int Iterations6 = 2;
    double altitudes6[Iterations6] = {1.5e+03, 1.5e+03};
    double velocities6[Iterations6] = {6000, 6000};
    double throttles6[Iterations6] = {0.72427, 0.94274};


    caseTag engine6 = rl10b;
//    perform_postprocessing(altitudes6, velocities6, throttles6, Iterations6, engine6);
//

}
